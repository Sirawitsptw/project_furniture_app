import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

class RiderOrderView extends StatefulWidget {
  final Map<String, dynamic> orderData;

  const RiderOrderView({super.key, required this.orderData});

  @override
  State<RiderOrderView> createState() => RiderOrderViewState();
}

class RiderOrderViewState extends State<RiderOrderView> {
  // --- Delivery status ---
  late String selectedStatus;
  final List<String> deliveryOptions = const [
    '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',
    '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡∏™‡πà‡∏á',
    '‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
    '‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
  ];

  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏£‡∏±‡∏ö‡πÄ‡∏≠‡∏á
  final List<String> pickupOptions = const [
    '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏°‡∏≤‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏≠‡∏á',
    '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß',
  ];

  /// map ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏±‡∏î‡∏™‡πà‡∏á/‡∏£‡∏±‡∏ö‡πÄ‡∏≠‡∏á -> ‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÄ‡∏ß‡∏•‡∏≤‡∏ö‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏Å
  final Map<String, String> statusTimeField = const {
    '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡∏™‡πà‡∏á': 'shippingAt',
    '‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à': 'deliveredAt',
    '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß': 'pickedUpAt', // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡πÄ‡∏≠‡∏á
  };

  // --- Payment status ---
  late String selectedPaymentStatus;
  final List<String> paymentOptions = const [
    '‡∏£‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á',
    '‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß',
  ];

  /// map ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô -> ‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÄ‡∏ß‡∏•‡∏≤‡∏ö‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏Å
  final Map<String, String> paymentTimeField = const {
    '‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß': 'paidAt',
  };

  // ‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  late bool isPickup;

  @override
  void initState() {
    super.initState();

    isPickup =
        (widget.orderData['deliveryOption'] as String?) == '‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á';

    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏±‡∏î‡∏™‡πà‡∏á/‡∏£‡∏±‡∏ö
    final initialDeliveryStatus =
        (widget.orderData['deliveryStatus'] as String?);

    if (isPickup) {
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏£‡∏±‡∏ö‡πÄ‡∏≠‡∏á ‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà 2 ‡∏Ñ‡πà‡∏≤‡∏ô‡∏µ‡πâ ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏°‡∏≤‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏≠‡∏á"
      if (initialDeliveryStatus == null ||
          !pickupOptions.contains(initialDeliveryStatus)) {
        selectedStatus = '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏°‡∏≤‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏≠‡∏á';
      } else {
        selectedStatus = initialDeliveryStatus;
      }
    } else {
      // ‡∏™‡πà‡∏á‡∏ñ‡∏∂‡∏á‡∏ö‡πâ‡∏≤‡∏ô: ‡∏Ñ‡∏á‡∏•‡∏¥‡∏™‡∏ï‡πå‡πÄ‡∏î‡∏¥‡∏°
      selectedStatus = initialDeliveryStatus ?? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡∏™‡πà‡∏á';
    }

    selectedPaymentStatus =
        (widget.orderData['paymentStatus'] as String?) ?? '‡∏£‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á';
  }

  Future<void> updateDeliveryStatus(String newStatus) async {
    final String docId = widget.orderData['docId']; // ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ id ‡πÅ‡∏ó‡∏ô docId ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
    final db = FirebaseFirestore.instance;
    final orderRef = db.collection('order').doc(docId);

    final String? timeField = statusTimeField[newStatus];
    final serverTime = FieldValue.serverTimestamp();

    try {
      await db.runTransaction((tx) async {
        final snap = await tx.get(orderRef);
        final data = (snap.data() as Map<String, dynamic>?) ?? {};

        final update = <String, dynamic>{
          'deliveryStatus': newStatus,
          'statusChangedAt': serverTime, // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏±‡∏î‡∏™‡πà‡∏á/‡∏£‡∏±‡∏ö
        };

        // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡πÄ‡∏ä‡πà‡∏ô shippingAt/deliveredAt/pickedUpAt)
        if (timeField != null && data[timeField] == null) {
          update[timeField] = serverTime;
        }

        tx.update(orderRef, update);
      });

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß')),
        );
      }
    } on FirebaseException catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${e.message}')),
        );
      }
    }
  }

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
  Future<void> updatePaymentStatus(String newStatus) async {
    final String docId = widget.orderData['docId']; // ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ id ‡πÅ‡∏ó‡∏ô docId ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
    final db = FirebaseFirestore.instance;
    final orderRef = db.collection('order').doc(docId);

    final String? timeField = paymentTimeField[newStatus];
    final serverTime = FieldValue.serverTimestamp();

    try {
      await db.runTransaction((tx) async {
        final snap = await tx.get(orderRef);
        final data = (snap.data() as Map<String, dynamic>?) ?? {};

        final update = <String, dynamic>{
          'paymentStatus': newStatus,
          'paymentChangedAt': serverTime, // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
        };

        // ‡πÄ‡∏ã‡πá‡∏ï paidAt ‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô "‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß"
        if (timeField != null && data[timeField] == null) {
          update[timeField] = serverTime;
        }

        tx.update(orderRef, update);
      });

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß')),
        );
      }
    } on FirebaseException catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${e.message}')),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final paymentDropdownEnabled =
        selectedPaymentStatus == '‡∏£‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á';

    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∏‡∏î‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏ï‡∏≤‡∏°‡πÇ‡∏´‡∏°‡∏î
    final List<String> currentDeliveryOptions =
        isPickup ? pickupOptions : deliveryOptions;

    return Scaffold(
      appBar: AppBar(
        title: const Text('‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'),
        backgroundColor: Colors.deepPurple,
        foregroundColor: Colors.white,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: SingleChildScrollView(
          child: Column(
            children: [
              Center(
                child: ClipRRect(
                  borderRadius: BorderRadius.circular(16),
                  child: Image.network(
                    widget.orderData['imageUrl'],
                    width: 200,
                    height: 200,
                    fit: BoxFit.cover,
                    errorBuilder: (context, error, stackTrace) =>
                        const Icon(Icons.broken_image, size: 100),
                  ),
                ),
              ),
              const SizedBox(height: 20),
              Card(
                elevation: 4,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(16),
                ),
                child: Padding(
                  padding: const EdgeInsets.all(16),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      buildText('üë§ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ${widget.orderData['nameCustomer']}'),
                      buildText('üè† ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà: ${widget.orderData['address']}'),
                      buildText('üìû ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå: ${widget.orderData['phone']}'),
                      buildText('üì¶ ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: ${widget.orderData['nameOrderProduct']}'),
                      buildText('üì¶ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${widget.orderData['quantityOrder']} ‡∏ä‡∏¥‡πâ‡∏ô'),
                      buildText('üíµ ‡∏£‡∏≤‡∏Ñ‡∏≤: ${widget.orderData['priceOrder']} ‡∏ö‡∏≤‡∏ó'),
                      buildText('üöö ‡∏ß‡∏¥‡∏ò‡∏µ‡∏à‡∏±‡∏î‡∏™‡πà‡∏á: ${widget.orderData['deliveryOption']}'),
                      buildText('üí≥ ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô: ${widget.orderData['paymentMethod']}'),
                      const Divider(height: 30),
                      Row(
                        crossAxisAlignment: CrossAxisAlignment.center,
                        children: [
                          const Text(
                            'üí∞ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô:',
                            style: TextStyle(fontSize: 18, fontWeight: FontWeight.w500),
                          ),
                          const SizedBox(width: 12),
                          Expanded(
                            child: paymentDropdownEnabled
                                ? _dropdownContainer(
                                    child: DropdownButtonHideUnderline(
                                      child: DropdownButton<String>(
                                        value: selectedPaymentStatus,
                                        isExpanded: true,
                                        icon: const Icon(Icons.arrow_drop_down),
                                        style: const TextStyle(fontSize: 16, color: Colors.black),
                                        items: paymentOptions.map((String value) {
                                          return DropdownMenuItem<String>(
                                            value: value,
                                            child: Text(value),
                                          );
                                        }).toList(),
                                        onChanged: (String? newValue) {
                                          if (newValue != null &&
                                              newValue != selectedPaymentStatus) {
                                            setState(() {
                                              selectedPaymentStatus = newValue;
                                            });
                                            updatePaymentStatus(newValue).then((_) {
                                              if (mounted) setState(() {});
                                            });
                                          }
                                        },
                                      ),
                                    ),
                                  )
                                : _dropdownContainer(
                                    // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ö‡∏ö‡∏≠‡πà‡∏≤‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà "‡∏£‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á"
                                    child: Padding(
                                      padding: const EdgeInsets.symmetric(
                                          vertical: 14, horizontal: 4),
                                      child: Text(
                                        selectedPaymentStatus,
                                        style: const TextStyle(
                                            fontSize: 16, color: Colors.black87),
                                      ),
                                    ),
                                  ),
                          ),
                        ],
                      ),

                      const SizedBox(height: 16),

                      // --- Delivery status row (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏≤‡∏°‡πÇ‡∏´‡∏°‡∏î) ---
                      Row(
                        crossAxisAlignment: CrossAxisAlignment.center,
                        children: [
                          Text(
                            isPickup ? 'üõí ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:' : 'üöö ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á:',
                            style: const TextStyle(
                                fontSize: 18, fontWeight: FontWeight.w500),
                          ),
                          const SizedBox(width: 12),
                          Expanded(
                            child: _dropdownContainer(
                              child: DropdownButtonHideUnderline(
                                child: DropdownButton<String>(
                                  value: selectedStatus,
                                  isExpanded: true,
                                  icon: const Icon(Icons.arrow_drop_down),
                                  style: const TextStyle(
                                      fontSize: 16, color: Colors.black),
                                  items: currentDeliveryOptions
                                      .map((String value) {
                                    return DropdownMenuItem<String>(
                                      value: value,
                                      child: Text(value),
                                    );
                                  }).toList(),
                                  onChanged: (String? newValue) {
                                    if (newValue != null &&
                                        newValue != selectedStatus) {
                                      setState(() {
                                        selectedStatus = newValue;
                                      });
                                      updateDeliveryStatus(newValue);
                                    }
                                  },
                                ),
                              ),
                            ),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _dropdownContainer({required Widget child}) {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 12),
      decoration: BoxDecoration(
        border: Border.all(color: Colors.deepPurple),
        borderRadius: BorderRadius.circular(12),
      ),
      child: child,
    );
  }

  Widget buildText(String text) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 12),
      child: Text(
        text,
        style: const TextStyle(fontSize: 18),
      ),
    );
  }
}
